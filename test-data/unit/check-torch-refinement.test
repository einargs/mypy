[case testTorchRefinementMnist]
import torch
from torch import Tensor
import torch.nn as nn
import torch.nn.functional as F
from typing_extensions import Annotated
from refinement import RefinementVar

T = RefinementVar('T')
S = RefinementVar('S')

A = RefinementVar('A')

class Net(nn.Module):
    def __init__(self) -> None:
        super(Net, self).__init__()
        self.conv1 = nn.Conv2d(1, 32, (3,3), (1,1), (0,0), (1,1))
        self.conv2 = nn.Conv2d(32, 64, (3,3), (1,1), (0,0), (1,1))
        self.dropout1 = nn.Dropout4(0.25)
        self.dropout2 = nn.Dropout2(0.5)
        self.fc1 = nn.Linear(9216, 128)
        self.fc2 = nn.Linear(128, 10)

    def forward(self, x: Annotated[Tensor, T, T.shape == (64, 1, 28, 28)]) -> Tensor:
        x0 = self.conv1(x)
        x1 = F.relu4(x0)
        x2 = self.conv2(x1)
        x3 = F.relu4(x2)
        x4 = F.max_pool2d(x3, (2,2), (2,2), (0,0), (1,1))
        x5 = self.dropout1(x4)
        x6: Annotated[Tensor, A, A.shape == (64, 9216)] = torch.flatten1(x5)
        x7 = self.fc1(x6)
        x8 = F.relu2(x7)
        x9 = self.dropout2(x8)
        x10 = self.fc2(x9)
        output = F.log_softmax(x10, dim=1)
        return output

[builtins fixtures/primitives.pyi]
